<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on A Developer&#39;s Experience</title>
    <link>/pages/</link>
    <description>Recent content in Pages on A Developer&#39;s Experience</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Yaml via Yaml</title>
      <link>/pages/yaml-via-yaml/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>/pages/yaml-via-yaml/</guid>
      <description>&lt;p&gt;I recovered this incredibly helpful YAML document from my over-a-decade old stash. This document is a YAML that teaches you YAML.&lt;/p&gt;</description>
    </item>
    <item>
      <title>scala-cli Cheatsheet</title>
      <link>/pages/scala-cli-cheatsheet/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/pages/scala-cli-cheatsheet/</guid>
      <description>&lt;h3 id=&#34;compile-files--folder&#34;&gt;Compile file(s) / folder&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli compile Hello.scala&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Compile with dependent classes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli compile Hello.scala Includes.scala&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Compiles all Scala files in the folder&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli compile .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-and-run-scala-files--folder&#34;&gt;Compile and run Scala files / folder&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Compile and run `main` in Hello.scala&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli run Hello.scala&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# `run` command is the default and may be omitted for running the class&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli Hello.scala&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Compile and run `main` with all associated files listed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli Hello.scala Utils.scala&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Compile the whole directory and run `main`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala-cli .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-scripts&#34;&gt;Running Scripts&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;HelloScript.sc&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SMS Firewall Privacy Policy</title>
      <link>/pages/sms-firewall-privacy/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <guid>/pages/sms-firewall-privacy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;sms_firewall.jpg&#34; alt=&#34;SMS Firewall&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The app does not collect and/or transmit any personal information – name, address, contact information etc. No information is shared with third party apps and services.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lo and Behold</title>
      <link>/pages/lo-behold/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <guid>/pages/lo-behold/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was published also on &lt;a href=&#34;https://www.linkedin.com/pulse/lo-behold-vivek-ragunathan&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Netflix’s movie recommendations has never impressed me. I have found the recommendations are either unrelated or predictable. When I have finished watching a low-rated movie, it would be nice if Netflix recommends a better-rated ones in the same genre rather than dump more low-rated ones on me. I wonder if my outdated LED TV is the reason.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Application Models</title>
      <link>/pages/app-models/</link>
      <pubDate>Sat, 27 Aug 2016 15:50:00 +0000</pubDate>
      <guid>/pages/app-models/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was published also on &lt;a href=&#34;https://www.linkedin.com/pulse/application-models-vivek-ragunathan&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A typical business application is composed of several flows or use-cases. Also, these flows consist of logical ones like a transaction that spans several flows. Take for instance an e-commerce application which consists of user registration/login, product lookup, and one of the most important interactions in an e-commerce application – the shopping cart, and much more. Although these application flows might appear to be discrete and independent of one another, it is after producing a working solution that we realize that these flows are inherently interrelated for one reason or another. The idea of designing stateless application flows is many times confused with the relation between the flows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Written in Stone</title>
      <link>/pages/written-in-stone/</link>
      <pubDate>Wed, 30 Dec 2015 06:58:42 +0000</pubDate>
      <guid>/pages/written-in-stone/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was &lt;a href=&#34;https://www.linkedin.com/pulse/bits-bytes-stones-vivek-ragunathan&#34;&gt;published&lt;/a&gt; also on LinkedIn.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;academia&#34;&gt;Academia&lt;/h3&gt;&#xA;&lt;p&gt;The Mamallapuram Shore Temple, constructed on the deep southern shores of the Bay of Bengal, is one of the oldest stone structures on the planet. It was built around the beginning of the Anno Domini (AD). The site consists of three temple structures, subsidiary structures, and statues primarily built with granite. Prominent statues are that of a lion and elephant with great significance in the way it was rock-cut. Chariots are the primary subsidiary structures other than the temple. It is inevitable not to be marveled at the temple design, intricate and precise carvings and inscriptions. Carvings are made on a monolithic rock on which the works of an elephant and its ear with its loose skin are nearly impossible even today. Inscriptions, according to linguists, is poetic and metaphorical, a sophisticated language nevertheless. Another marvel is Krishna’s Butter Ball, a massive boulder of rock sitting tight above a rocky slope.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Useful Unix Commands</title>
      <link>/pages/cmd-line-quickies/</link>
      <pubDate>Sat, 07 Feb 2015 08:02:58 +0000</pubDate>
      <guid>/pages/cmd-line-quickies/</guid>
      <description>&lt;h3 id=&#34;change-permission-on-folderfiles-recursively1&#34;&gt;Change Permission on Folder/Files Recursively&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;GOOD&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find /path/to/base/dir -type d -exec chmod &lt;span style=&#34;color:#bd93f9&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{}&lt;/span&gt; +&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find /path/to/base/dir -type f -exec chmod &lt;span style=&#34;color:#bd93f9&#34;&gt;644&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{}&lt;/span&gt; +&lt;span style=&#34;color:#f1fa8c&#34;&gt;```&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;BETTER&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Court Room Climax</title>
      <link>/pages/court-room-climax/</link>
      <pubDate>Sun, 25 Jan 2015 00:19:31 +0000</pubDate>
      <guid>/pages/court-room-climax/</guid>
      <description>&lt;p&gt;&lt;small&gt;Before reading this page, please read the relevant blog post: &lt;a href=&#34;/posts/a-team-lib&#34;&gt;A-Team Library&lt;/a&gt;. This page is an excerpt of a climactic &lt;em&gt;court room like&lt;/em&gt; epilogue of a document that was authored for one of the clients I use to work with. The actual context and details have been omitted. The excerpt has been borrowed and tailored a little bit for public reading. The tone and message remain the same.&lt;/small&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compilation</title>
      <link>/pages/jit/</link>
      <pubDate>Wed, 01 Oct 2014 04:27:30 +0000</pubDate>
      <guid>/pages/jit/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;small&gt;An excerpt from the book &lt;a href=&#34;&#34;&gt;Professional .NET v2.0&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;The Just in Time (JIT) Compiler gets its name because it compiles your managed code into executable native code on the fly. That is, it compiles the IL just as it’s needed. Understanding how the JIT works, again, isn’t strictly necessary in order to be productive with managed code. In fact, those not familiar with assembly-level programming might feel a little uncomfortable with the content in this section; if you’ve never programmed in a language like C or C++, for example, then you are sure to feel a little lost. Don’t fret; you can safely skim over this section and come back after you’ve worked with the CLR a little more. But for those who read through, it will give you some internals-style insight into how things work in the runtime.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tree List View</title>
      <link>/pages/tlv/</link>
      <pubDate>Wed, 01 Oct 2014 03:45:22 +0000</pubDate>
      <guid>/pages/tlv/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was published also on &lt;a href=&#34;https://www.codeproject.com/Articles/825741/A-Simple-Tree-List-View&#34;&gt;CodeProject.com&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;tlv.png&#34; alt=&#34;featured_image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;How about a control like that? Isn’t it cool? Unfortunately, you don’t get that with the Windows Forms controls collection. But you can get yourself one; read on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;0x Like Algorithms</title>
      <link>/pages/cpp0x-algos/</link>
      <pubDate>Wed, 01 Oct 2014 03:32:28 +0000</pubDate>
      <guid>/pages/cpp0x-algos/</guid>
      <description>&lt;p&gt;A few C++0x algorithms and other helper methods implemented for C++98&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scrollable Image Viewer</title>
      <link>/pages/img-viewer/</link>
      <pubDate>Sat, 09 Oct 2010 00:00:00 +0000</pubDate>
      <guid>/pages/img-viewer/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was published also on &lt;a href=&#34;https://www.codeproject.com/Articles/25748/Scrollable-Image-Viewer&#34;&gt;CodeProject&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The .NET Base Class Library comes with a PictureBox control that is used for displaying images. Although it offers a few scaling modes, unfortunately, it does not provide a scrolling facility. This article presents a picture box like control [Scrollable Image Viewer Control or SIV Control] that is used to display images in one of two modes:-&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesafe Logger</title>
      <link>/pages/ts-logger/</link>
      <pubDate>Fri, 08 Oct 2010 18:34:09 +0000</pubDate>
      <guid>/pages/ts-logger/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was co-authored with &lt;a href=&#34;https://www.linkedin.com/in/sanjeev-venkataramanan-3496b018&#34;&gt;Sanjeev&lt;/a&gt;, and &lt;a href=&#34;https://www.codeproject.com/Articles/35648/Type-Safe-Logger-For-C&#34;&gt;published&lt;/a&gt; on &lt;a href=&#34;www.codeproject.com&#34;&gt;CodeProject&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;problem&#34;&gt;PROBLEM&lt;/h3&gt;&#xA;&lt;p&gt;Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files. There are so many other destinations where the logs can be written to. Irrespective of the destination that each application must be able to configure, the diagnostic log message and the way to generate the message is of our interest now. So we are in need of a logger class that can behave transparent to the logging destination. That should not be a problem, it would be fun to design that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pattern Conflict</title>
      <link>/pages/pattern-conflict/</link>
      <pubDate>Fri, 08 Oct 2010 17:56:18 +0000</pubDate>
      <guid>/pages/pattern-conflict/</guid>
      <description>Are your classes that implement the Template Method Design Pattern “Decorator aware”?</description>
    </item>
  </channel>
</rss>
