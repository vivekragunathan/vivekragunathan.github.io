<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional-Programming on A Developer&#39;s Experience</title>
    <link>//localhost:51234/categories/functional-programming/</link>
    <description>Recent content in Functional-Programming on A Developer&#39;s Experience</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:51234/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Either Disjoint or Union Types</title>
      <link>//localhost:51234/post/2020-12-28-union-types/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/post/2020-12-28-union-types/</guid>
      <description>Many languages support union types, and it is high time Scala did. Union types are coming in upcoming version of Scala - Dotty. Union types (|) are already being compared with Either and Option (disjoint unions).</description>
    </item>
    <item>
      <title>Know Thy Option</title>
      <link>//localhost:51234/2020/04/17/know-thy-option/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2020/04/17/know-thy-option/</guid>
      <description>&lt;p&gt;Avoid &lt;code&gt;.get&lt;/code&gt; at all costs. Forget there is even a &lt;code&gt;.get&lt;/code&gt; function on &lt;code&gt;Option&lt;/code&gt;. There is always a way out - better one, than using &lt;code&gt;.get&lt;/code&gt;. Same applies to &lt;code&gt;.head&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you are going to have access the value in an &lt;code&gt;Option&lt;/code&gt; in a test class, prefer extending your test class from &lt;code&gt;OptionValues&lt;/code&gt;. Then you can use &lt;code&gt;.value&lt;/code&gt; on an &lt;code&gt;Option&lt;/code&gt;. Doing so establishes the presence of value as verification with meaningful error if value is not defined.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Pattern for Saner Mocking</title>
      <link>//localhost:51234/2020/04/02/saner-mocking/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2020/04/02/saner-mocking/</guid>
      <description>&lt;p&gt;It is common to see mocks being setup this way in unit tests.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scenario&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Test Case 1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;addressResolutionService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;resolve&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;vendorInventoryService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;checkInventory&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;....&lt;/span&gt; another bunch of when and then returns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;shipmentService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;schedule&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;thisIsTheActualCalltoTest&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;verify&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;vendorInventoryService&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;).&lt;/span&gt;checkInventory&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; other such verifications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scenario&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Test Case 2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;addressResolutionService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;resolve&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;vendorInventoryService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;checkInventory&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;....&lt;/span&gt; another bunch of when and then returns &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;give or take one or more mocks compared to the previous test &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;when&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;shipmentService&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;schedule&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)).&lt;/span&gt;thenReturn&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;thisIsTheActualCalltoTest&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;verify&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;vendorInventoryService&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;).&lt;/span&gt;checkInventory&lt;span style=&#34;color:#ff79c6&#34;&gt;(...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; other such verifications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; other such test cases&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Non-FP to FP Conversion Caveat</title>
      <link>//localhost:51234/2019/02/19/fp-conversion-caveat/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2019/02/19/fp-conversion-caveat/</guid>
      <description>Sometimes you learn the best from others; by watching. This post is based on such an instance.</description>
    </item>
    <item>
      <title>A Rambling on Error Handling</title>
      <link>//localhost:51234/2018/02/18/ramble-error-handling/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2018/02/18/ramble-error-handling/</guid>
      <description>&lt;p&gt;In the early years, software applications were tiny, compared to what we build today. In any given application, one could say, there were only a handful of error scenarios to deal with. Besides, error reporting, if not error handling, lacked finesse. Just slap the user with something red enough, and just say &lt;strong&gt;An error occurred&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS Programming in C# - Immutability</title>
      <link>//localhost:51234/2018/02/18/js-in-cs-immutability/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2018/02/18/js-in-cs-immutability/</guid>
      <description>Enough! JavaScript had us in its grip for long with its foot guns.</description>
    </item>
    <item>
      <title>Facets of Immutability</title>
      <link>//localhost:51234/2017/12/106/facets-of-mmutability/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:51234/2017/12/106/facets-of-mmutability/</guid>
      <description>&lt;p&gt;Immutability, the cornerstone of functional programming, has many facets.&lt;/p&gt;&#xA;&lt;p&gt;Not every (mainstream) language supports all the facets; at least not per what each facet stands for. That&amp;rsquo;s what I will talk about today. The various facets of immutability from a theoretical perspective, and briefly show how some of the mainstream languages have adopted and support these facets in their own way.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
