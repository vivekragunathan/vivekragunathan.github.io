<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeProject on A Developer&#39;s Experience</title>
    <link>/categories/codeproject/</link>
    <description>Recent content in CodeProject on A Developer&#39;s Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Oct 2014 19:43:27 +0000</lastBuildDate><atom:link href="/categories/codeproject/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Simple Tree List View !!!</title>
      <link>/2014/10/05/simple-tlv/</link>
      <pubDate>Sat, 04 Oct 2014 19:43:27 +0000</pubDate>
      
      <guid>/2014/10/05/simple-tlv/</guid>
      <description>Digging up stash is one of the best pass times. You know you never know what you will find.</description>
    </item>
    
    <item>
      <title>Invoking methods with Out and Ref (Part 2) !!!</title>
      <link>/2010/10/28/outref2/</link>
      <pubDate>Thu, 28 Oct 2010 17:22:39 +0000</pubDate>
      
      <guid>/2010/10/28/outref2/</guid>
      <description>Straight to code&amp;#8230;.. int SomeMethod(string arg1, string arg2, ref DayOfWeek arg3) { // Wildest implementation!</description>
    </item>
    
    <item>
      <title>Typesafe Logger</title>
      <link>/pages/typesafe-logger/</link>
      <pubDate>Fri, 08 Oct 2010 18:34:09 +0000</pubDate>
      
      <guid>/pages/typesafe-logger/</guid>
      <description>Article co-authored with Sanjeev, and published on CodeProject
 PROBLEM Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files.</description>
    </item>
    
    <item>
      <title>Thinking Currying !!!</title>
      <link>/2010/10/03/thinking-currying/</link>
      <pubDate>Sun, 03 Oct 2010 12:08:00 +0000</pubDate>
      
      <guid>/2010/10/03/thinking-currying/</guid>
      <description>Currying is a mathematical concept based on lambda calculus. It is a technique of operating on a function (taking multiple arguments) by splitting and capable of chaining into a series of single argument functions.</description>
    </item>
    
    <item>
      <title>Quiz – (Journey through templates, SFINAE and specialization) !!!</title>
      <link>/2010/04/10/sfinae/</link>
      <pubDate>Sat, 10 Apr 2010 07:39:00 +0000</pubDate>
      
      <guid>/2010/04/10/sfinae/</guid>
      <description>template&amp;lt;typename A, typename B&amp;gt; class TClass { public: TClass() { } // Overload #1 public: std::string SomeMethod(A a, B b) { std::ostringstream ostr; ostr &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;-&amp;#34; &amp;lt;&amp;lt; b; return ostr.</description>
    </item>
    
    <item>
      <title>Missing MI !!!</title>
      <link>/2010/03/05/missing-mi/</link>
      <pubDate>Fri, 05 Mar 2010 17:10:00 +0000</pubDate>
      
      <guid>/2010/03/05/missing-mi/</guid>
      <description>We all know C# does not offer multiple inheritance but offers arguments that programmers can live without it.</description>
    </item>
    
    <item>
      <title>sizeof vs Marshal.SizeOf !!!</title>
      <link>/2009/12/30/sizeof-vs-marshal-sizeof/</link>
      <pubDate>Tue, 29 Dec 2009 22:25:00 +0000</pubDate>
      
      <guid>/2009/12/30/sizeof-vs-marshal-sizeof/</guid>
      <description>There are two facilities in C# to determine the size of a type – sizeof operator andMarshal.</description>
    </item>
    
    <item>
      <title>Curious Case Of Anonymous Delegates !!!</title>
      <link>/2009/09/02/anondelegates/</link>
      <pubDate>Wed, 02 Sep 2009 18:29:00 +0000</pubDate>
      
      <guid>/2009/09/02/anondelegates/</guid>
      <description>Senthil has left us thrilled in his new post, and also inspired me to write about the topic.</description>
    </item>
    
    <item>
      <title>finally and Return Values !!!</title>
      <link>/2009/07/02/finally-and-return-values/</link>
      <pubDate>Wed, 01 Jul 2009 21:07:00 +0000</pubDate>
      
      <guid>/2009/07/02/finally-and-return-values/</guid>
      <description>Let us read some code:-
int SomeMethod() { int num = 1; try { num = 5; return num; } finally { num += 5; } }  What is the return value of SomeMethod?</description>
    </item>
    
    <item>
      <title>Type Safe Logger</title>
      <link>/2009/04/25/type-safe-logger/</link>
      <pubDate>Sat, 25 Apr 2009 15:02:00 +0000</pubDate>
      
      <guid>/2009/04/25/type-safe-logger/</guid>
      <description>Article co-authored with Sanjeev, and published on CodeProject
 PROBLEM Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files.</description>
    </item>
    
    <item>
      <title>Simple Array Class For C&#43;&#43;</title>
      <link>/2009/04/10/simple-array-class-for-c/</link>
      <pubDate>Fri, 10 Apr 2009 16:48:00 +0000</pubDate>
      
      <guid>/2009/04/10/simple-array-class-for-c/</guid>
      <description>This is a simple array like class for C++, which can be used as a safe wrapper for accessing a block of memory pointed by a bare pointer.</description>
    </item>
    
    <item>
      <title>CComPtr Misconception !!!</title>
      <link>/2009/04/08/ccomptr-misconception/</link>
      <pubDate>Wed, 08 Apr 2009 00:15:00 +0000</pubDate>
      
      <guid>/2009/04/08/ccomptr-misconception/</guid>
      <description>This is about a killer bug identified by our chief software engineer in our application.</description>
    </item>
    
    <item>
      <title>OrderedThreadPool – Task Execution In Queued Order !!!</title>
      <link>/2009/03/18/ordered-thread-pool/</link>
      <pubDate>Wed, 18 Mar 2009 03:35:00 +0000</pubDate>
      
      <guid>/2009/03/18/ordered-thread-pool/</guid>
      <description>I would not want to write chunks of code to spawns threads and perform many of my background tasks such as firing events, UI update etc.</description>
    </item>
    
    <item>
      <title>Settling Casting Restrictions !!!</title>
      <link>/2009/02/06/settling-casting-restrictions/</link>
      <pubDate>Thu, 05 Feb 2009 20:31:00 +0000</pubDate>
      
      <guid>/2009/02/06/settling-casting-restrictions/</guid>
      <description>Remember the Casting Restrictions we discussed a while back, let us settle that now.</description>
    </item>
    
    <item>
      <title>The WD Anti-Propaganda Campaign !!!</title>
      <link>/2009/01/25/the-wd-anti-propaganda-campaign/</link>
      <pubDate>Sun, 25 Jan 2009 22:35:00 +0000</pubDate>
      
      <guid>/2009/01/25/the-wd-anti-propaganda-campaign/</guid>
      <description>Thanks to the internet. If nobody else bothers or understands what loss of data means, you can shout it aloud here.</description>
    </item>
    
    <item>
      <title>Casting Restrictions ???</title>
      <link>/2008/11/22/casting-restrictions/</link>
      <pubDate>Sat, 22 Nov 2008 11:43:00 +0000</pubDate>
      
      <guid>/2008/11/22/casting-restrictions/</guid>
      <description>We all know that the runtime can detect the actual type of a System.</description>
    </item>
    
    <item>
      <title>Understanding (ref)erences !!!</title>
      <link>/2008/09/26/understanding-references/</link>
      <pubDate>Fri, 26 Sep 2008 17:03:00 +0000</pubDate>
      
      <guid>/2008/09/26/understanding-references/</guid>
      <description>Let us take a look at the following piece of code:-  public void Operate(IList iList2)</description>
    </item>
    
    <item>
      <title>The Surprising Finalize Call !!!</title>
      <link>/2007/02/22/the-surprising-finalize-call/</link>
      <pubDate>Wed, 21 Feb 2007 20:27:00 +0000</pubDate>
      
      <guid>/2007/02/22/the-surprising-finalize-call/</guid>
      <description>Guess the output of the following program:-
class SomeClass : IDisposable { public SomeClass() { Trace.</description>
    </item>
    
    <item>
      <title>Learning Type Access Modifiers Basics !!!</title>
      <link>/2006/12/20/learning-type-access-modifiers-basics/</link>
      <pubDate>Wed, 20 Dec 2006 18:01:00 +0000</pubDate>
      
      <guid>/2006/12/20/learning-type-access-modifiers-basics/</guid>
      <description>When I started developing my module, I had an interface IParamCountBasedAlgo declared as a nested type in a class AlgorithmOneExecutor, declared as follows:- namespace DataStructuresAndAlgo</description>
    </item>
    
    <item>
      <title>First Google Gadget(s) !!!</title>
      <link>/2006/12/20/first-google-gadgets/</link>
      <pubDate>Wed, 20 Dec 2006 17:53:00 +0000</pubDate>
      
      <guid>/2006/12/20/first-google-gadgets/</guid>
      <description>I did some cool stuff here with google. I wrote my first &amp;#8220;Hello World&amp;#8221; sort of google gadget.</description>
    </item>
    
    <item>
      <title>Follow the trail…….Join the Concurrency Revolution !!!</title>
      <link>/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</link>
      <pubDate>Wed, 20 Dec 2006 17:50:00 +0000</pubDate>
      
      <guid>/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</guid>
      <description>I could not stop writing this post after I read this article by Herb Sutter.</description>
    </item>
    
    <item>
      <title>The New Looking Post !!!</title>
      <link>/2006/12/20/the-new-looking-post/</link>
      <pubDate>Wed, 20 Dec 2006 17:44:00 +0000</pubDate>
      
      <guid>/2006/12/20/the-new-looking-post/</guid>
      <description>I am very much fond of tools, updates and stuff. So I keep updating my softwares and hear/learn about new tools etc.</description>
    </item>
    
    <item>
      <title>where enum does not work !!!</title>
      <link>/2006/12/20/where-enum-does-not-work/</link>
      <pubDate>Wed, 20 Dec 2006 12:25:00 +0000</pubDate>
      
      <guid>/2006/12/20/where-enum-does-not-work/</guid>
      <description>I was writing a generic method with enum as the Constraint, and the compiler spat a few errors that did not directly convey me that enums cannot used as generic constraints.</description>
    </item>
    
    <item>
      <title>Overloading - A Matter Of Taste !!!</title>
      <link>/2006/12/20/overloading-a-matter-of-taste/</link>
      <pubDate>Wed, 20 Dec 2006 12:21:00 +0000</pubDate>
      
      <guid>/2006/12/20/overloading-a-matter-of-taste/</guid>
      <description>This was a pretty interesting discussion about method overloading in the managed world.</description>
    </item>
    
    <item>
      <title>Fooled by the Activator !!!</title>
      <link>/2006/07/07/fooled-by-the-activator/</link>
      <pubDate>Fri, 07 Jul 2006 01:56:00 +0000</pubDate>
      
      <guid>/2006/07/07/fooled-by-the-activator/</guid>
      <description>It was interesting to know that a custom exception, say an exception class derived from System.</description>
    </item>
    
    <item>
      <title>Properties C# 2.0 – Not Elegant Enough !!!</title>
      <link>/2006/06/03/properties-c-2-0-not-elegant-enough/</link>
      <pubDate>Sat, 03 Jun 2006 06:59:00 +0000</pubDate>
      
      <guid>/2006/06/03/properties-c-2-0-not-elegant-enough/</guid>
      <description>Prior to .NET 2.0, there wasn’t the facility in C# to opt the visibility level for the get and set property or indexers.</description>
    </item>
    
    <item>
      <title>Singularity – Safety &amp; Speed !!!</title>
      <link>/2006/06/02/singularity-safety-speed/</link>
      <pubDate>Fri, 02 Jun 2006 19:54:00 +0000</pubDate>
      
      <guid>/2006/06/02/singularity-safety-speed/</guid>
      <description>I read about this interesting thing somewhere in MSDN.
There are two types of programming or programming languages.</description>
    </item>
    
    <item>
      <title>out, ref and InvokeMember !!!</title>
      <link>/2006/05/12/out-ref-and-invokemember/</link>
      <pubDate>Fri, 12 May 2006 02:26:00 +0000</pubDate>
      
      <guid>/2006/05/12/out-ref-and-invokemember/</guid>
      <description>When I was working on the .NET reflection extravaganza thing that I explained in my previous column, i learnt one another interesting thing, that is about the Type.</description>
    </item>
    
  </channel>
</rss>
