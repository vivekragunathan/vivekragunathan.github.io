<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeProject on A Developer&#39;s Experience</title>
    <link>/categories/codeproject/</link>
    <description>Recent content in CodeProject on A Developer&#39;s Experience</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Oct 2014 19:43:27 +0000</lastBuildDate>
    <atom:link href="/categories/codeproject/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Simple Tree List View !!!</title>
      <link>/2014/10/05/simple-tlv/</link>
      <pubDate>Sat, 04 Oct 2014 19:43:27 +0000</pubDate>
      <guid>/2014/10/05/simple-tlv/</guid>
      <description>&lt;p&gt;Digging up stash is one of the best pass times. You know you never know what you will find. I had an article written quite some time back but had not posted it anywhere. Not sure why. I posted it at CodeProject – &lt;a href=&#34;http://www.codeproject.com/Articles/825741/A-Simple-Tree-List-View&#34; target=&#34;_blank&#34;&gt;A Simple Tree List View&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoking methods with Out and Ref (Part 2) !!!</title>
      <link>/2010/10/28/outref2/</link>
      <pubDate>Thu, 28 Oct 2010 17:22:39 +0000</pubDate>
      <guid>/2010/10/28/outref2/</guid>
      <description>&lt;p style=&#34;font-family:Tahoma;font-size:11pt;&#34;&gt;&#xA;  Straight to code&amp;#8230;..&#xA;&lt;/p&gt;&#xA;&lt;pre style=&#34;color:blue;font-family:Consolas;font-size:11pt;&#34;&gt;int SomeMethod(string arg1,&#xA;    string arg2,&#xA;    ref DayOfWeek arg3)&#xA;{&#xA;    // Wildest implementation!&#xA;}&lt;/pre&gt;&#xA;&lt;p style=&#34;font-family:Tahoma;font-size:11pt;&#34;&gt;&#xA;  The above method had to be executed on its dispatcher thread. So let unravel a bit of the wildest implementation above.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesafe Logger</title>
      <link>/pages/ts-logger/</link>
      <pubDate>Fri, 08 Oct 2010 18:34:09 +0000</pubDate>
      <guid>/pages/ts-logger/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This article was co-authored with &lt;a href=&#34;https://www.linkedin.com/in/sanjeev-venkataramanan-3496b018&#34;&gt;Sanjeev&lt;/a&gt;, and &lt;a href=&#34;https://www.codeproject.com/Articles/35648/Type-Safe-Logger-For-C&#34;&gt;published&lt;/a&gt; on &lt;a href=&#34;www.codeproject.com&#34;&gt;CodeProject&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;problem&#34;&gt;PROBLEM&lt;/h3&gt;&#xA;&lt;p&gt;Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files. There are so many other destinations where the logs can be written to. Irrespective of the destination that each application must be able to configure, the diagnostic log message and the way to generate the message is of our interest now. So we are in need of a logger class that can behave transparent to the logging destination. That should not be a problem, it would be fun to design that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thinking Currying</title>
      <link>/posts/thinking-currying/</link>
      <pubDate>Sun, 03 Oct 2010 12:08:00 +0000</pubDate>
      <guid>/posts/thinking-currying/</guid>
      <description>&lt;p&gt;&lt;em&gt;Currying&lt;/em&gt; is a mathematical concept based on lambda calculus. It is a technique of operating on a function (taking multiple arguments) by splitting and capable of chaining into a series of single argument functions. It is very similar to what a human would attempt to do on paper. For example, if you have to add numbers &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt;, what would you do? Class II mathematics -&lt;code&gt;0&lt;/code&gt; in hand, &lt;code&gt;1&lt;/code&gt; in the mind, add &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, so &lt;code&gt;1&lt;/code&gt; in the mind, then &lt;code&gt;2&lt;/code&gt; in the hand, &amp;hellip; up to &lt;code&gt;10&lt;/code&gt;. So we compute the addition with one argument at a time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quiz – (Journey through templates, SFINAE and specialization) !!!</title>
      <link>/2010/04/10/sfinae/</link>
      <pubDate>Sat, 10 Apr 2010 07:39:00 +0000</pubDate>
      <guid>/2010/04/10/sfinae/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typename&lt;/span&gt; A, &lt;span style=&#34;color:#ff79c6&#34;&gt;typename&lt;/span&gt; B&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TClass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; TClass()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Overload #1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;string SomeMethod(A a, B b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;ostringstream ostr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ostr &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ostr.str();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Overload #2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;string SomeMethod(B b, A a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;ostringstream ostr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ostr &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ostr.str();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that is a template class with SomeMethod overloads. Why would somebody write such a class? Imagine it is an adder class, and the method overloads could used to add with parameters specified in either order. Following is the way one could use the above (based on the adder example):-&lt;/p&gt;</description>
    </item>
    <item>
      <title>Missing MI !!!</title>
      <link>/2010/03/05/missing-mi/</link>
      <pubDate>Fri, 05 Mar 2010 17:10:00 +0000</pubDate>
      <guid>/2010/03/05/missing-mi/</guid>
      <description>&lt;p&gt;We all know C# does not offer multiple inheritance but offers arguments that programmers can live without it. It is true in almost all cases, especially all cat and animal or employee and manager projects. I have seen a few cases where if C# offered multiple inheritance, the solution would have been natural, elegant and succinct.&lt;/p&gt;</description>
    </item>
    <item>
      <title>sizeof vs Marshal.SizeOf !!!</title>
      <link>/2009/12/30/sizeof-vs-marshal-sizeof/</link>
      <pubDate>Tue, 29 Dec 2009 22:25:00 +0000</pubDate>
      <guid>/2009/12/30/sizeof-vs-marshal-sizeof/</guid>
      <description>&lt;p&gt;There are two facilities in C# to determine the size of a type – &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/eahchzkf.aspx&#34;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt; operator and&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/5s4920fa.aspx&#34;&gt;&lt;code&gt;Marshal.SizeOf&lt;/code&gt;&lt;/a&gt; method. Let us discuss what they offer and how they differ.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Curious Case Of Anonymous Delegates !!!</title>
      <link>/2009/09/02/anondelegates/</link>
      <pubDate>Wed, 02 Sep 2009 18:29:00 +0000</pubDate>
      <guid>/2009/09/02/anondelegates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://msmvps.com/blogs/senthil/default.aspx&#34; target=&#34;_blank&#34;&gt;Senthil&lt;/a&gt; has left us thrilled in his &lt;a href=&#34;http://msmvps.com/blogs/senthil/archive/2009/09/01/anonymous-methods-as-event-handlers-part-1.aspx&#34; target=&#34;_blank&#34;&gt;new post&lt;/a&gt;, and also inspired me to write about the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/0yw3tz5k(VS.80).aspx&#34; target=&#34;_blank&#34;&gt;topic&lt;/a&gt;. Although, anonymous delegates have become a mundane stuff amongst programmers, there is still these subtle stuff left unexplored. Alright, let us try to answer Senthil’s question before he unravels the mystery in his next post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>finally and Return Values !!!</title>
      <link>/2009/07/02/finally-and-return-values/</link>
      <pubDate>Wed, 01 Jul 2009 21:07:00 +0000</pubDate>
      <guid>/2009/07/02/finally-and-return-values/</guid>
      <description>&lt;DIV style=&#34;font-family:Tahoma;font-size:11pt;&#34;&gt;&#xA;  Let us read some code:-&lt;/p&gt;&#xA;  &lt;pre class=&#34;brush: c-sharp;&#34; style=&#34;font-family:Consolas;font-size:11pt;&#34;&gt;int SomeMethod()&#xA;{&#xA;    int num = 1;&#xA;&#xA;    try&#xA;    {&#xA;        num = 5;&#xA;        return num;&#xA;    }&#xA;    finally&#xA;    {&#xA;        num += 5;&#xA;    }&#xA;}&lt;/pre&gt;&#xA;  &lt;p&gt;&#xA;    What is the return value of SomeMethod? Some anonymous guy asked that question in the code project forum, and it has been answered. I am writing about it here because it is interesting and subtle. One should not be surprised when people misinterpret finally. So let us take a guess, 10 (i = 5, then incremented by 5 in the finally block).It is not the right answer; rather SomeMethod returns 5. Agreed that finally is called in all cases of returning from SomeMethod but the return value is calculated when it is time to return from SomeMethod, normally or abnormally. The subtlety lies not in the way finally is executed but in the return value is calculated. So the return value (5) is decided when a return is encountered in the try block. The finally is just called for cleanup; and the num modified there is local to SomeMethod. So make the return value 10, it is no use being hasty making&lt;br /&gt; SomeMethod return from the finally block. Because returning from finally is not allowed. (We will talk about it later why returning from catch block is a bad practice&lt;br /&gt; and why can&#39;t we return from finally block). Had such modifications been done on a reference type, they would have been visible outside of SomeMethod, although the return value may be different. For instance,&#xA;  &lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Safe Logger</title>
      <link>/2009/04/25/type-safe-logger/</link>
      <pubDate>Sat, 25 Apr 2009 15:02:00 +0000</pubDate>
      <guid>/2009/04/25/type-safe-logger/</guid>
      <description>&lt;p&gt;Article co-authored with &lt;a href=&#34;www.linkedin.com/in/sanjeev-venkataramanan-3496b018&#34;&gt;Sanjeev&lt;/a&gt;, and &lt;a href=&#34;http://www.codeproject.com/Articles/35648/Type-Safe-Logger-For-C&#34;&gt;published&lt;/a&gt; on &lt;a href=&#34;www.codeproject.com&#34;&gt;CodeProject&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;problem&#34;&gt;PROBLEM&lt;/h3&gt;&#xA;&lt;p&gt;Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files. There are so many other destinations where the logs can be written to. Irrespective of the destination that each application must be able to configure, the diagnostic log message and the way to generate the message is of our interest now. So we are in need of a logger class that can behave transparent to the logging destination. That should not be a problem, it would be fun to design that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Array Class For C&#43;&#43;</title>
      <link>/2009/04/10/simple-array-class-for-c/</link>
      <pubDate>Fri, 10 Apr 2009 16:48:00 +0000</pubDate>
      <guid>/2009/04/10/simple-array-class-for-c/</guid>
      <description>&lt;p style=&#34;font-family:Tahoma;font-size:11pt;&#34;&gt;&#xA;  This is a simple array like class for C++, which can be used as a safe wrapper for accessing a block of memory pointed by a bare pointer.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CComPtr Misconception !!!</title>
      <link>/2009/04/08/ccomptr-misconception/</link>
      <pubDate>Wed, 08 Apr 2009 00:15:00 +0000</pubDate>
      <guid>/2009/04/08/ccomptr-misconception/</guid>
      <description>&lt;p&gt;This is about a killer bug identified by our chief software engineer in our application. What was devised for ease of use and write smart code ended up in this killer defect due to improper perception. Ok, let us go!&lt;/p&gt;</description>
    </item>
    <item>
      <title>OrderedThreadPool – Task Execution In Queued Order !!!</title>
      <link>/2009/03/18/ordered-thread-pool/</link>
      <pubDate>Wed, 18 Mar 2009 03:35:00 +0000</pubDate>
      <guid>/2009/03/18/ordered-thread-pool/</guid>
      <description>&lt;p&gt;I would not want to write chunks of code to spawns threads and perform many of my background tasks such as firing events, UI update etc. Instead I would use the System.Threading.ThreadPool class which serves this purpose. And a programmer who knows to use this class for such cases would also be aware that the tasks queued to the thread pool are NOT dispatched in the order they are queued. They get dispatched for execution in a haphazard fashion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Settling Casting Restrictions !!!</title>
      <link>/2009/02/06/settling-casting-restrictions/</link>
      <pubDate>Thu, 05 Feb 2009 20:31:00 +0000</pubDate>
      <guid>/2009/02/06/settling-casting-restrictions/</guid>
      <description>&lt;p style=&#34;font-family:Tahoma;&#34;&gt;&#xA;  Remember the Casting Restrictions we discussed a while back, let us settle that now. So we have some code like this:&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The WD Anti-Propaganda Campaign !!!</title>
      <link>/2009/01/25/the-wd-anti-propaganda-campaign/</link>
      <pubDate>Sun, 25 Jan 2009 22:35:00 +0000</pubDate>
      <guid>/2009/01/25/the-wd-anti-propaganda-campaign/</guid>
      <description>&lt;div style=&#34;font-family:Tahoma;&#34;&gt;&#xA;  Thanks to the internet. If nobody else bothers or understands what loss of data means, you can shout it aloud here. I lost 500GB of data &amp;#8211; every moment of my personal and professional life captured in bits and bytes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Casting Restrictions ???</title>
      <link>/2008/11/22/casting-restrictions/</link>
      <pubDate>Sat, 22 Nov 2008 11:43:00 +0000</pubDate>
      <guid>/2008/11/22/casting-restrictions/</guid>
      <description>&lt;p&gt;We all know that the runtime can detect the actual type of a &lt;code&gt;System.Object&lt;/code&gt; instance. The primitive data types provided by the runtime are compatible with one another for casting (assuming that we do not truncate the values). So if I have an &lt;code&gt;int&lt;/code&gt;, it can be cast to &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;ulong&lt;/code&gt;. All that is fine. Watch this:-&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding (ref)erences !!!</title>
      <link>/2008/09/26/understanding-references/</link>
      <pubDate>Fri, 26 Sep 2008 17:03:00 +0000</pubDate>
      <guid>/2008/09/26/understanding-references/</guid>
      <description>&lt;p&gt;Let us take a look at the following piece of code:-&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Surprising Finalize Call !!!</title>
      <link>/2007/02/22/the-surprising-finalize-call/</link>
      <pubDate>Wed, 21 Feb 2007 20:27:00 +0000</pubDate>
      <guid>/2007/02/22/the-surprising-finalize-call/</guid>
      <description>&lt;p&gt;Guess the output of the following program:-&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SomeClass&lt;/span&gt; : IDisposable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; SomeClass()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Trace.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SomeClass - Attempting instance creation&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Exception(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ohh !!! Not Now&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; Dispose()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Trace.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SomeClass::Dispose&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;~SomeClass()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Trace.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SomeClass::Finalizer&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; Main(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; args[]){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;SomeClass sc = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SomeClass();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(Exception ex){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Trace.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Main - {0}&amp;#34;&lt;/span&gt;, ex.Message);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- more --&gt;&#xA;&lt;p&gt;This will be the output of the program:-&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Type Access Modifiers Basics !!!</title>
      <link>/2006/12/20/learning-type-access-modifiers-basics/</link>
      <pubDate>Wed, 20 Dec 2006 18:01:00 +0000</pubDate>
      <guid>/2006/12/20/learning-type-access-modifiers-basics/</guid>
      <description>&lt;div id=&#34;msgcns!753E720D857C98F6!244&#34;&gt;&#xA;  &lt;p&gt;&#xA;    &lt;span style=&#34;font-size:100%;&#34;&gt;When I started developing my module, I had an interface &lt;span style=&#34;color:rgb(51,153,102);font-family:Courier New,Courier,Monospace;&#34;&gt;IParamCountBasedAlgo&lt;/span&gt; declared as a nested type in a class &lt;span style=&#34;color:rgb(51,153,102);font-family:Courier New,Courier,Monospace;&#34;&gt;AlgorithmOneExecutor&lt;/span&gt;, declared as follows:-&lt;/span&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&#xA;  &lt;/p&gt;</description>
    </item>
    <item>
      <title>First Google Gadget(s) !!!</title>
      <link>/2006/12/20/first-google-gadgets/</link>
      <pubDate>Wed, 20 Dec 2006 17:53:00 +0000</pubDate>
      <guid>/2006/12/20/first-google-gadgets/</guid>
      <description>&lt;div id=&#34;msgcns!753E720D857C98F6!213&#34;&gt;&#xA;  &lt;span style=&#34;font-size:85%;&#34;&gt;I did some cool stuff here with google. I wrote my first &amp;#8220;Hello World&amp;#8221; sort of google gadget. It claims no rewards but just was fun. Since I am a novice in html and javascript sort of things, this gadget is pretty simple.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Follow the trail…….Join the Concurrency Revolution !!!</title>
      <link>/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</link>
      <pubDate>Wed, 20 Dec 2006 17:50:00 +0000</pubDate>
      <guid>/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</guid>
      <description>&lt;p&gt;I could not stop writing this post after I read &lt;a href=&#34;http://www.gotw.ca/publications/guest-ed-200609.htm&#34;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; article by Herb Sutter. The article is just a casual technical discussion but very encouraging that a person requires at the right time – the time when he is a student. Even after several years after my college, I have been trying to keep myself a student and I got a right encouragement to join the Concurrency revolution. Thanks to Herb Sutter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The New Looking Post !!!</title>
      <link>/2006/12/20/the-new-looking-post/</link>
      <pubDate>Wed, 20 Dec 2006 17:44:00 +0000</pubDate>
      <guid>/2006/12/20/the-new-looking-post/</guid>
      <description>&lt;div style=&#34;font-family:trebuchet ms;&#34; id=&#34;msgcns!753E720D857C98F6!205&#34;&gt;&#xA;  &lt;span style=&#34;font-size:100%;&#34;&gt;I am very much fond of tools, updates and stuff. So I keep updating my softwares and hear/learn about new tools etc. I am excited about the new spaces &amp;#8211; Live Spaces. Looks much better than before. I thought I would write something about the new spaces. Please &amp;#8216;spaces guys&amp;#8217;, make the arranging the boxes on the home page a bit easier and intelligent. That is a feature request. Otherwise the default skin/theme is cool and professional. Old themes are still old and not much appealing. Anyway, i write the post just to say i love it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>where enum does not work !!!</title>
      <link>/2006/12/20/where-enum-does-not-work/</link>
      <pubDate>Wed, 20 Dec 2006 12:25:00 +0000</pubDate>
      <guid>/2006/12/20/where-enum-does-not-work/</guid>
      <description>&lt;p&gt;I was writing a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/0x6a29h6.aspx&#34;&gt;generic&lt;/a&gt; method with &lt;code&gt;enum&lt;/code&gt; as the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/d5x73970.aspx&#34;&gt;Constraint&lt;/a&gt;, and the compiler spat a few errors that did not directly convey me that &lt;code&gt;enum&lt;/code&gt;s cannot used as generic constraints. I learnt the following from my investigation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overloading - A Matter Of Taste !!!</title>
      <link>/2006/12/20/overloading-a-matter-of-taste/</link>
      <pubDate>Wed, 20 Dec 2006 12:21:00 +0000</pubDate>
      <guid>/2006/12/20/overloading-a-matter-of-taste/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blogs.wdevs.com/mattdoig/archive/2006/08/20/14222.aspx#14244&#34;&gt;This&lt;/a&gt; was a pretty interesting discussion about method overloading in the managed world. As the discussion says that the overloading is a matter of taste. It seems that the method overloading in the managed world, indeed, is a matter of taste. Sad BUT True !!! But on the contrary, it must have been a [strict] rule. Overloading might be exhibited differently by each language in the unmanaged world. But as far as .NET goes, it must have been made a standard specification. Pardon me, if there is one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fooled by the Activator !!!</title>
      <link>/2006/07/07/fooled-by-the-activator/</link>
      <pubDate>Fri, 07 Jul 2006 01:56:00 +0000</pubDate>
      <guid>/2006/07/07/fooled-by-the-activator/</guid>
      <description>&lt;p&gt;It was interesting to know that a custom exception, say an exception class derived from &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.applicationexception.aspx&#34;&gt;System.ApplicationException&lt;/a&gt;, thrown while creating an instance of a type using Activator.CreateInstance does not get caught in its appropriate exception handler, instead gets caught in the global exception handler &lt;code&gt;catch(Exception ex)&lt;/code&gt;, if provided. Any exception raised while creating an instance of the loaded type is wrapped inside a new exception object as &lt;code&gt;InnerException&lt;/code&gt; by &lt;code&gt;Activator&lt;/code&gt;.&lt;code&gt;CreateInstance&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Properties C# 2.0 – Not Elegant Enough !!!</title>
      <link>/2006/06/03/properties-c-2-0-not-elegant-enough/</link>
      <pubDate>Sat, 03 Jun 2006 06:59:00 +0000</pubDate>
      <guid>/2006/06/03/properties-c-2-0-not-elegant-enough/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family:Georgia;font-size:100%;&#34;&gt;Prior to .NET 2.0, there wasn’t the facility in C# to opt the visibility level for the get and set property or indexers. And i take my comment in &lt;/span&gt;&lt;span style=&#34;font-family:Georgia;font-size:100%;&#34;&gt;&lt;a href=&#34;http://developerexperience.blogspot.com/2006/04/properties-in-cclithe-c-look-alike.html&#34;&gt;my previous post&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;font-size:100%;&#34;&gt;&lt;span style=&#34;font-family:Georgia;&#34;&gt; that C# does not provide the facility of having different visibility levels for the get and set accessors. While that is partly correct, it is no more in C# 2.0.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity – Safety &amp; Speed !!!</title>
      <link>/2006/06/02/singularity-safety-speed/</link>
      <pubDate>Fri, 02 Jun 2006 19:54:00 +0000</pubDate>
      <guid>/2006/06/02/singularity-safety-speed/</guid>
      <description>&lt;p&gt;I read about this interesting thing somewhere in MSDN.&lt;/p&gt;&#xA;&lt;p&gt;There are two types of programming or programming languages. The good old C/C++ kind called the unsafe programming languages, and the other is the safe programming type which we realised very much after advent of Java/C#. And there has always been debate about safety and speed. And neither of the two has won.&lt;/p&gt;</description>
    </item>
    <item>
      <title>out, ref and InvokeMember !!!</title>
      <link>/2006/05/12/out-ref-and-invokemember/</link>
      <pubDate>Fri, 12 May 2006 02:26:00 +0000</pubDate>
      <guid>/2006/05/12/out-ref-and-invokemember/</guid>
      <description>&lt;p&gt;When I was working on the .NET reflection extravaganza thing that I explained in my previous column, i learnt one another interesting thing, that is about the Type.InvokeMember. How will pass out or ref parameters for the method invoked using Type.InvokeMember ? If you are going to invoke a method with the prototype&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
