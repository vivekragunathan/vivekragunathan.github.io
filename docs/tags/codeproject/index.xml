<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codeproject on A Developer&#39;s Experience</title>
    <link>/tags/codeproject/</link>
    <description>Recent content in Codeproject on A Developer&#39;s Experience</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Nov 2014 10:36:44 +0000</lastBuildDate>
    <atom:link href="/tags/codeproject/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Secret behind Bjarne and Herb’s Papers on Unified Syntax !!!</title>
      <link>/posts/secret-of-cpp-unified-syntax/</link>
      <pubDate>Sun, 09 Nov 2014 10:36:44 +0000</pubDate>
      <guid>/posts/secret-of-cpp-unified-syntax/</guid>
      <description>&lt;p&gt;A long time back, in one of my posts here&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I had discussed about Extension Methods&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; … in C++; sorta! It seems that the grand daddy, Bjarne Stroustoup&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, had read my post, and was impressed. So he has published a paper – Call syntax&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;: &lt;code&gt;x.f(y)&lt;/code&gt; vs. &lt;code&gt;f(x,y)&lt;/code&gt;. Good thing except I don’t like the idea of assuming &lt;code&gt;x.f(y)&lt;/code&gt; for &lt;code&gt;f(x, y)&lt;/code&gt; while the reverse is the actual idea of extension methods. You will know when you read his paper. It seems the commander, Herb Sutter&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, also was impressed with my post. Not only that he too doesn’t seem to like the &lt;code&gt;x.f(y)&lt;/code&gt; for f(x, y) idea. Great men think alike. LOL! So he published his paper – &lt;strong&gt;Unified Syntax&lt;/strong&gt;&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;. How is that?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Missing MI !!!</title>
      <link>/2010/03/05/missing-mi/</link>
      <pubDate>Fri, 05 Mar 2010 17:10:00 +0000</pubDate>
      <guid>/2010/03/05/missing-mi/</guid>
      <description>&lt;p&gt;We all know C# does not offer multiple inheritance but offers arguments that programmers can live without it. It is true in almost all cases, especially all cat and animal or employee and manager projects. I have seen a few cases where if C# offered multiple inheritance, the solution would have been natural, elegant and succinct.&lt;/p&gt;</description>
    </item>
    <item>
      <title>finally and Return Values !!!</title>
      <link>/2009/07/02/finally-and-return-values/</link>
      <pubDate>Wed, 01 Jul 2009 21:07:00 +0000</pubDate>
      <guid>/2009/07/02/finally-and-return-values/</guid>
      <description>&lt;DIV style=&#34;font-family:Tahoma;font-size:11pt;&#34;&gt;&#xA;  Let us read some code:-&lt;/p&gt;&#xA;  &lt;pre class=&#34;brush: c-sharp;&#34; style=&#34;font-family:Consolas;font-size:11pt;&#34;&gt;int SomeMethod()&#xA;{&#xA;    int num = 1;&#xA;&#xA;    try&#xA;    {&#xA;        num = 5;&#xA;        return num;&#xA;    }&#xA;    finally&#xA;    {&#xA;        num += 5;&#xA;    }&#xA;}&lt;/pre&gt;&#xA;  &lt;p&gt;&#xA;    What is the return value of SomeMethod? Some anonymous guy asked that question in the code project forum, and it has been answered. I am writing about it here because it is interesting and subtle. One should not be surprised when people misinterpret finally. So let us take a guess, 10 (i = 5, then incremented by 5 in the finally block).It is not the right answer; rather SomeMethod returns 5. Agreed that finally is called in all cases of returning from SomeMethod but the return value is calculated when it is time to return from SomeMethod, normally or abnormally. The subtlety lies not in the way finally is executed but in the return value is calculated. So the return value (5) is decided when a return is encountered in the try block. The finally is just called for cleanup; and the num modified there is local to SomeMethod. So make the return value 10, it is no use being hasty making&lt;br /&gt; SomeMethod return from the finally block. Because returning from finally is not allowed. (We will talk about it later why returning from catch block is a bad practice&lt;br /&gt; and why can&#39;t we return from finally block). Had such modifications been done on a reference type, they would have been visible outside of SomeMethod, although the return value may be different. For instance,&#xA;  &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
