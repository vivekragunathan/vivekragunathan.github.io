<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on A Developer&#39;s Experience</title>
    <link>/tags/design/</link>
    <description>Recent content in design on A Developer&#39;s Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Nov 2016 06:04:46 +0000</lastBuildDate><atom:link href="/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Importance of Semantics</title>
      <link>/2016/11/07/semantics/</link>
      <pubDate>Mon, 07 Nov 2016 06:04:46 +0000</pubDate>
      
      <guid>/2016/11/07/semantics/</guid>
      <description>&lt;p&gt;&lt;strong&gt;semantics&lt;/strong&gt;&lt;sup id=&#34;fnref-2002-1&#34;&gt;&lt;a href=&#34;#fn-2002-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; | /sɪˈmæntɪks/ | noun (functioning as sing)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the branch of linguistics that deals with the study of meaning, changes in meaning, and the principles that govern the relationship between sentences or words and their meanings&lt;/li&gt;
&lt;li&gt;the study of the relationships between signs and symbols and what they represent&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;logic&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;the study of interpretations of a formal theory&lt;/li&gt;
&lt;li&gt;the study of the relationship between the structure of a theory and its subject matter&lt;/li&gt;
&lt;li&gt;(of a formal theory) the principles that determine the truth or falsehood of sentences within the theory, and the references of its terms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Semantics is ever more important in programming.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Application Models</title>
      <link>/2016/08/27/app-models/</link>
      <pubDate>Sat, 27 Aug 2016 15:50:31 +0000</pubDate>
      
      <guid>/2016/08/27/app-models/</guid>
      <description>&lt;p&gt;A typical business application is composed of several flows or use-cases. Also, these flows consist of logical ones like a transaction that spans several flows. Take for instance an e-commerce application which consists of user registration/login, product lookup, and one of the most important interactions in an e-commerce application &amp;ndash; the shopping cart, and much more. Although these application flows might appear to be discrete and independent of one another, it is after producing a working solution that we realize that these flows are inherently interrelated for one reason or another. The idea of designing stateless application flows is many times confused with the relation between the flows.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Iterators vs. Generators</title>
      <link>/2016/08/03/iterators-vs-generators/</link>
      <pubDate>Tue, 02 Aug 2016 19:16:00 +0000</pubDate>
      
      <guid>/2016/08/03/iterators-vs-generators/</guid>
      <description>&lt;p&gt;Yes, there is a difference. Although both produce the same end effect, an iterator is not the same as a generator. The difference is in the way it is implemented and also consumed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mundane vs JINQ Way</title>
      <link>/2016/07/15/mundane-vs-jinq-way/</link>
      <pubDate>Fri, 15 Jul 2016 06:27:45 +0000</pubDate>
      
      <guid>/2016/07/15/mundane-vs-jinq-way/</guid>
      <description>&lt;p&gt;New things are not always instantly accepted. Beyond skepticism, new things challenge the comfort people are accustomed to. JINQ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; wasn&amp;rsquo;t particularly welcomed. It was either discarded as unknown angel or worse &amp;hellip; ridiculed. However, JINQ still promises expressive succinct code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A-Team Library !!!</title>
      <link>/2015/01/26/atl/</link>
      <pubDate>Mon, 26 Jan 2015 01:11:52 +0000</pubDate>
      
      <guid>/2015/01/26/atl/</guid>
      <description>&lt;p&gt;A short while ago, I had to write a compelling document for a client about a library that I had developed during my tenure, call it &lt;em&gt;A-Team Library&lt;/em&gt; or &lt;strong&gt;ATL&lt;/strong&gt;. Having to learn the “&lt;em&gt;eyes-wide-shut&lt;/em&gt;” culture to maintain the couples-of-decades old code and simultaneously develop on the top of it was very disheartening. It was time a lot of things were given fresh thoughts. Not the least of all duplication of code and &lt;em&gt;functionality&lt;/em&gt;. But not just that. Like in a programming language, when there is more than one way of doing something, when those ways are opposing, it causes nothing but confusion. So was the case. The business seemed to be far from realizing it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
